from django.shortcuts import get_object_or_404
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.urls import reverse_lazy
from django.db.models import Q
from .models import Note, Tag
from .forms import NoteForm, TagForm
from django.contrib.auth.mixins import LoginRequiredMixin

# üìå –í–∏–≤—ñ–¥ —É—Å—ñ—Ö –Ω–æ—Ç–∞—Ç–æ–∫ –ª–∏—à–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class NoteListView(LoginRequiredMixin, ListView):
    model = Note
    template_name = 'notes/note_list.html'
    context_object_name = 'notes'

    def get_queryset(self):
        tag = self.request.GET.get("tag")  # –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–≥–æ–º
        search_query = self.request.GET.get("q")  # –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
        queryset = Note.objects.filter(user=self.request.user)  # –ù–æ—Ç–∞—Ç–∫–∏ —Ç—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        if tag:
            queryset = queryset.filter(tags__name=tag)
        if search_query:
            queryset = queryset.filter(Q(title__icontains=search_query) | Q(content__icontains=search_query))

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["tags"] = Tag.objects.all()
        context["search_query"] = self.request.GET.get("q", "")  # –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ—à—É–∫—É –≤ —à–∞–±–ª–æ–Ω
        return context

# üìå –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–æ—Ç–∞—Ç–∫–∏
class NoteDetailView(LoginRequiredMixin, DetailView):
    model = Note
    template_name = 'notes/note_detail.html'
    context_object_name = 'note'

    def get_queryset(self):
        return Note.objects.filter(user=self.request.user)

# üìå –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏
class NoteCreateView(LoginRequiredMixin, CreateView):
    model = Note
    form_class = NoteForm
    template_name = 'notes/note_form.html'
    success_url = reverse_lazy('notes:note-list')
    
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super().form_valid(form)

# üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
class NoteUpdateView(LoginRequiredMixin, UpdateView):
    model = Note
    form_class = NoteForm
    template_name = 'notes/note_form.html'
    success_url = reverse_lazy('notes:note-list')

    def get_queryset(self):
        return Note.objects.filter(user=self.request.user)

# üìå –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
class NoteDeleteView(LoginRequiredMixin, DeleteView):
    model = Note
    template_name = 'notes/note_confirm_delete.html'
    success_url = reverse_lazy('notes:note-list')

    def get_queryset(self):
        return Note.objects.filter(user=self.request.user)

# üìå –í–∏–≤—ñ–¥ —É—Å—ñ—Ö —Ç–µ–≥—ñ–≤
class TagListView(LoginRequiredMixin, ListView):
    model = Tag
    template_name = 'notes/tag_list.html'
    context_object_name = 'tags'

# üìå –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—É
class TagCreateView(LoginRequiredMixin, CreateView):
    model = Tag
    form_class = TagForm
    template_name = 'notes/tag_form.html'
    success_url = reverse_lazy('notes:tag-list')

# üìå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—É
class TagDeleteView(LoginRequiredMixin, DeleteView):
    model = Tag
    template_name = "notes/tag_confirm_delete.html"
    success_url = reverse_lazy("notes:tag-list")