from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth import get_user_model
from django.contrib.messages import get_messages

User = get_user_model()

class UserTests(TestCase):
    
    def setUp(self):
        self.register_url = reverse('users:register')
        self.login_url = reverse('users:login_page')
        self.logout_url = reverse('users:logout')
        self.password_reset_url = reverse('users:password_reset')
        self.password_reset_done_url = reverse('users:password_reset_done')
        self.password_reset_sent_url = reverse('users:password_reset_sent')
        self.password_reset_complete_url = reverse('users:password_reset_complete')

        self.user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'password': 'NewPassword123',
            'password': 'NewPassword123'
        }
        
        self.user_login_data = {
            'username': 'newuser',
            'password': 'NewPassword123'
        }

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—É/–ª–æ–≥–∞—É—Ç—É
        self.user = User.objects.create_user(
            username='testuser',
            email='testuser@example.com',
            password='TestPassword123'
        )

    def test_register_user(self):
        response = self.client.post(self.register_url, self.user_data, follow=True)
    
        if response.status_code != 302:
            print("‚ùå –°—Ç–∞—Ç—É—Å-–∫–æ–¥ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î 302 (Redirect). –§–∞–∫—Ç–∏—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥:", response.status_code)
            print("üìÑ –í–º—ñ—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", response.content.decode())

        self.assertRedirects(response, reverse('users:registration_success'),
                         msg_prefix="‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
    
        self.assertTrue(User.objects.filter(username='newuser').exists(), 
                    "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 'newuser' –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
    
        print("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 'newuser' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")

        
    def test_login_user(self):
        response = self.client.post(self.login_url, {
            'username': 'testuser',
            'password': 'TestPassword123'
        })
        self.assertEqual(response.status_code, 302)  # –û—á—ñ–∫—É—î–º–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É
        self.assertRedirects(response, reverse('home'))
        print("‚úÖ –õ–æ–≥—ñ–Ω –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.")

    def test_logout_user(self):
        self.client.login(username='testuser', password='TestPassword123')
        response = self.client.get(self.logout_url)
        self.assertRedirects(response, reverse('users:login_page'))
        print("‚úÖ –õ–æ–≥–∞—É—Ç –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.")

    def test_password_reset_request(self):
        response = self.client.post(self.password_reset_url, {'email': 'testuser@example.com'})
        self.assertRedirects(response, self.password_reset_sent_url)
        print("‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.")

    def test_password_reset_complete(self):
        response = self.client.get(self.password_reset_complete_url)
        self.assertEqual(response.status_code, 200)
        print("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω–∞.")


class AccessControlTests(TestCase):
    def setUp(self):
        self.client = Client()

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.user = User.objects.create_user(
            username='testuser',
            email='testuser@example.com',
            password='TestPassword123'
        )

        # URL-–∞–¥—Ä–µ—Å–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        self.home_url = reverse('home')
        self.notes_url = reverse('notes:note-list')
        self.contacts_url = reverse('contacts:contact-list')
        self.files_url = reverse('files:file_list')

        self.login_url = reverse('users:login_page')

    def test_access_allowed_for_authenticated_user(self):
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        self.client.login(username='testuser', password='TestPassword123')

        response = self.client.get(self.home_url)
        self.assertEqual(response.status_code, 200)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.assertContains(response, '–í–∏–π—Ç–∏')
        self.assertContains(response, 'Notes')
        self.assertContains(response, 'Contacts')
        self.assertContains(response, 'Files')

        print("‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ.")

    def test_access_denied_for_anonymous_user(self):
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        response = self.client.get(self.home_url)
        self.assertEqual(response.status_code, 200)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—à–µ –∫–Ω–æ–ø–∫–∏ "–£–≤—ñ–π—Ç–∏" —Ç–∞ "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è"
        self.assertContains(response, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è')
        self.assertContains(response, '–£–≤—ñ–π—Ç–∏')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–Ω–æ–ø–∫–∞ "–í–∏–π—Ç–∏" –ù–ï –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è
        self.assertNotContains(response, '–í–∏–π—Ç–∏')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–Ω–æ–ø–∫–∏ "Notes", "Contacts", "Files" –ù–ï –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è
        self.assertNotContains(response, 'Notes')
        self.assertNotContains(response, 'Contacts')
        self.assertNotContains(response, 'Files')
        
        print("‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–º–µ–∂–µ–Ω–∏–π –∫–æ—Ä–µ–∫—Ç–Ω–æ.")
